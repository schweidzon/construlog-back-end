generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id              Int           @id(map: "address_pk") @default(autoincrement())
  construction_id Int
  street          String        @db.VarChar(255)
  number          String        @db.VarChar(255)
  city            String        @db.VarChar(255)
  state           String        @db.VarChar(255)
  cep             String        @db.VarChar(255)
  complement      String        @db.VarChar(255)
  constructions   constructions @relation(fields: [construction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_fk0")
}

model admins {
  id            Int             @id(map: "admins_pk") @default(autoincrement())
  name          String          @db.VarChar(255)
  function      String          @db.VarChar(15)
  user_id       Int
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "admins_fk0")
  constructions constructions[]
}

model clients {
  id            Int             @id(map: "clients_pk") @default(autoincrement())
  name          String          @db.VarChar(255)
  user_id       Int
  users         users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "clients_fk0")
  constructions constructions[]
}

model construction_activity {
  id                    Int                @id(map: "construction_activity_pk") @default(autoincrement())
  construction_diary_id Int
  activity              String             @db.VarChar(255)
  construction_diary    construction_diary @relation(fields: [construction_diary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "construction_activity_fk0")
}

model construction_diary {
  id                    Int                     @id(map: "construction_diary_pk") @default(autoincrement())
  date                  DateTime                @db.Date
  construction_id       Int
  constructions         constructions           @relation(fields: [construction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "construction_diary_fk0")
  construction_activity construction_activity[]
  employees_diary       employees_diary[]
  photos_diary          photos_diary[]
}

model constructions {
  id                 Int                  @id(map: "constructions_pk") @default(autoincrement())
  admin_id           Int
  client_id          Int
  name               String               @db.VarChar(255)
  admins             admins               @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "constructions_fk0")
  clients            clients              @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "constructions_fk1")
  address            address[]
  construction_diary construction_diary[]
}

model employees {
  id              Int               @id(map: "employees_pk") @default(autoincrement())
  name            String            @db.VarChar(255)
  function        String            @db.VarChar(255)
  age             Int
  cpf             String            @unique @db.VarChar(255)
  employees_diary employees_diary[]
}

model employees_diary {
  id                    Int                @id(map: "employees_diary_pk") @default(autoincrement())
  construction_diary_id Int
  employees_id          Int
  construction_diary    construction_diary @relation(fields: [construction_diary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_diary_fk0")
  employees             employees          @relation(fields: [employees_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_diary_fk1")
}

model photos_diary {
  id                    Int                @id(map: "photos_diary_pk") @default(autoincrement())
  photo_url             String             @db.VarChar(255)
  description           String             @db.VarChar(255)
  construction_diary_id Int
  construction_diary    construction_diary @relation(fields: [construction_diary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "photos_diary_fk0")
}

model users {
  id        Int       @id(map: "users_pk") @default(autoincrement())
  email     String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  user_type String    @db.VarChar(255)
  admins    admins[]
  clients   clients[]
  session   session[]
}

model session {
  id      Int    @id(map: "session_pk") @default(autoincrement())
  user_id Int
  token   String @db.VarChar(600)
  users   users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "session_fk0")
}
